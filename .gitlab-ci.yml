# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - test
  - integration
  - staging
  - publish
  - pages
  - scan
  - lifecycle

include:
# Python packages build,lint, test and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

# # Helm Chart linting and Publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# # Docs pages
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# k8s steps
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# integration job
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'

# staging job
- project: "ska-telescope/templates-repository"
  file: "gitlab-ci/includes/deploy.staging.gitlab-ci.yml"


# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
# k8s-test:
#   variables:
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
#   before_script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT



k8s-test:
  variables:
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
  before_script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait
  retry: 1

k8s-test-low:
  retry: 1
  extends:
    - k8s-test
  variables:
    TELESCOPE: 'SKA-low'
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - make k8s-install-chart TELESCOPE=SKA-low
    - make k8s-wait
    - make k8s-test
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-low
    auto_stop_in: 1 minute

stop-k8s-test-low:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace

#integration
deploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

redeploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295"'


info-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

stop-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '



deploy-integration-low:
  extends:
    - deploy-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'    
    TELESCOPE : 'SKA-low'
  environment:
    name: integration-low-$CI_PROJECT_NAME
    on_stop: stop-integration-low
  script:
    - make k8s-install-chart TELESCOPE=SKA-low
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" ' 

redeploy-integration-low:
  extends:
    - redeploy-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
    TELESCOPE: 'SKA-low'
  environment:
    name: integration-low-$CI_PROJECT_NAME
  script:
    - make k8s-uninstall-chart
    - make k8s-delete-namespace
    - make k8s-install-chart TELESCOPE=SKA-low
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295"'

info-integration-low:
  extends:
    - info-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
    TELESCOPE: 'SKA-low'
  environment:
    name: integration-low-$CI_PROJECT_NAME
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

stop-integration-low:
  extends:
    - stop-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
  environment:
    name: integration-low-$CI_PROJECT_NAME
    action: stop
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '


#staging
deploy-staging:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

redeploy-staging:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295"'


info-staging:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

stop-staging:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '


deploy-staging-low:
  extends:
    - deploy-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'    
    TELESCOPE : 'SKA-low'
  environment:
    name: staging-low-$CI_PROJECT_NAME
    on_stop: stop-staging-low
  script:
    - make k8s-install-chart TELESCOPE=SKA-low
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

redeploy-staging-low:
  extends:
    - redeploy-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'    
    TELESCOPE : 'SKA-low'
  environment:
    name: staging-low-$CI_PROJECT_NAME
  script:
    - make k8s-uninstall-chart
    - make k8s-delete-namespace
    - make k8s-install-chart TELESCOPE=SKA-low
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

info-staging-low:
  extends:
    - info-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
    TELESCOPE: 'SKA-low'
  environment:
    name: staging-low-$CI_PROJECT_NAME
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '

stop-staging-low:
  extends:
    - stop-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low'
    TELESCOPE: 'SKA-low'
  environment:
    name: staging-$CI_PROJECT_NAME
    action: stop
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME == "hm-295" '