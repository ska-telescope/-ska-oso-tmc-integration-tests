# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - on-demand
  - test
  - integration
  - publish
  - staging
  - pages
  - scan
  - lifecycle

include:
# Python packages build,lint, test and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

# # Helm Chart linting and Publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# # Docs pages
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# k8s steps
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# integration job
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'

# staging job
- project: "ska-telescope/templates-repository"
  file: "gitlab-ci/includes/deploy.staging.gitlab-ci.yml"

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# # Publish bdd test results on Jira.
# - project: 'ska-telescope/templates-repository'
#   file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'


xray-publish:
  stage: publish
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  tags:
    - k8srunner
  before_script:
    - '[ -f .make/xray.mk ] || (echo "File xray.mk not included in Makefile; exit 1")'
    - "make help | grep xray-publish"
  script:
    - ls -al
    - ls -al build
    - ls -al tests
    - pip3 install -U ska-ser-xray
    - XRAY_TEST_RESULT_FILE="build/cucumber.json" make xray-publish
  rules:
    - exists:
        - tests/xray-config.json # needs to be configurable as per XRAY_EXECUTION_CONFIG in make
  dependencies:
    - k8s-test
  allow_failure: true


# mid-on-demand-deploy:
#   stage: on-demand
#   tags:
#     - k8srunner
#   variables:
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mid-on-demand"
#     TARANTA_ENABLED: "true"
#   script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
#     - make k8s-install-chart
#     - make k8s-wait
#     - make taranta-link
#     - make alarm-handler-configurator-link
#   environment:
#     name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
#     kubernetes:
#       # This repetition is needed for gitlab to parse the namespace correctly
#       namespace: $KUBE_NAMESPACE
#     on_stop: mid-on-demand-destroy
#   when: manual
#   allow_failure: true # need to keep this to unlock the pipeline

# mid-on-demand-destroy:
#   stage: on-demand
#   tags:
#     - k8srunner
#   variables:
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mid-on-demand"
#   script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
#     - make k8s-uninstall-chart
#   environment:
#     name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
#     kubernetes:
#       # This repetition is needed for gitlab to parse the namespace correctly
#       namespace: $KUBE_NAMESPACE
#     action: stop
#   when: manual
#   allow_failure: true # need to keep this to unlock the pipeline

# k8s-test:
#   tags:
#     - k8srunner-large
#   variables:
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
#     DISH_SIMULATION_ENABLED: "true"
#     SUBARRAY_COUNT: 2
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
#   before_script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
#     - 'make help | grep k8s-test'
#     - make k8s-install-chart
#     - make k8s-wait
#   retry: 1

# dish-lmc-dish001:
#   stage: test
#   tags:
#     - k8srunner
#   variables:
#     DISH_INDEX: "001"
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX"
#     DISH_LMC_SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX"
#     DISH_HELM_RELEASE: "2.5.0"
#     K8S_DISH_LMC_CHART: "ska-dish-lmc"
#   before_script:
#     - make cred SERVICE_ACCOUNT=$DISH_LMC_SERVICE_ACCOUNT
#   script:
#     - make k8s-install-chart-car KUBE_NAMESPACE=$KUBE_NAMESPACE K8S_CHART_PARAMS='-f charts/dish_lmc_values.yml 
#       --set "global.dishes={$(DISH_INDEX)}" --version=2.5.0 
#       --set global.exposeAllDS=false 
#       --set global.operator=true 
#       --set global.minikube=false' 
#       HELM_RELEASE=$DISH_HELM_RELEASE K8S_CHART=$K8S_DISH_LMC_CHART
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-dish-lmc-001
#     action: stop
#   allow_failure: true

# dish-lmc-dish002:
#   extends:
#     - dish-lmc-dish001
#   variables:
#     DISH_INDEX: "002"
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX"
#     DISH_LMC_SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX"
#     DISH_HELM_RELEASE: "2.5.0"
#     K8S_DISH_LMC_CHART: "ska-dish-lmc"
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-dish-lmc-001
#     action: stop

# k8s-test-dish-lmc:
#   stage: test
#   tags:
#     - k8srunner
#   variables:
#     DISH_SIMULATION_ENABLED: "false"
#     SUBARRAY_COUNT: 2
#     DISH_TANGO_HOST: "databaseds-tango-base"
#     CLUSTER_DOMAIN: "svc.cluster.local"
#     PORT: "10000"
#     DISH_INDEX_1: "001"
#     DISH_INDEX_2: "002"
#     DISH_NAMESPACE_1: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX_1"
#     DISH_NAMESPACE_2: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-$DISH_INDEX_2"
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-test"
#     DISH_LMC_SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-test"
#   script:
#     - make cred SERVICE_ACCOUNT=$DISH_LMC_SERVICE_ACCOUNT
#     - make k8s-install-chart
#     - make k8s-wait
#     - make k8s-test MARK=real_dish
#   needs:
#     - dish-lmc-dish001
#     - dish-lmc-dish002
#   after_script:
#     - make k8s-uninstall-chart

# stop-k8s-test-dish-lmc:
#   extends:
#   - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-test"
#   script:
#     - make k8s-uninstall-chart
#     - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
#     - make k8s-delete-namespace



# k8s-test-tmc-with-sdp:
#   retry: 1
#   extends:
#     - k8s-test
#   variables:
#     TELESCOPE: 'SKA-mid'
#     CLUSTER_DOMAIN: "svc.cluster.local"
#     PORT: "10000"
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp'
#     KUBE_NAMESPACE_SDP: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-sdp'
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp"
#     MARK: 'real_sdp'
#     SDP_SIMULATION_ENABLED: 'false'
#     TARANTA_ENABLED: 'true'
#   script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - make k8s-install-chart TELESCOPE=SKA-mid
#     - make k8s-wait
#     - make k8s-test
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-test-tmc-with-sdp
#     auto_stop_in: 1 minute


# stop-k8s-test-tmc-with-sdp:
#   extends:
#     - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp'
#   script:
#     - make k8s-uninstall-chart
#     - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
#     - make k8s-delete-namespace



# stop-k8s-dish-lmc-001:
#   stage: test
#   extends:
#     - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-001"
#     DISH_HELM_RELEASE: "2.5.0"
#     K8S_DISH_LMC_CHART: "ska-dish-deploy-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# redeploy-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# info-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# stop-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# #staging
# deploy-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG

# redeploy-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG


# info-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG

# stop-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAGlmc"
#   script:
#     - make k8s-do-uninstall-chart KUBE_NAMESPACE=$KUBE_NAMESPACE HELM_RELEASE=$DISH_HELM_RELEASE K8S_CHART=$K8S_DISH_LMC_CHART
#     - kubectl -n $KUBE_NAMESPACE delete pods,svc,sa,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all

# stop-k8s-dish-lmc-002:
#   extends:
#     - stop-k8s-dish-lmc-001
#   variables:
#     KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-dish-lmc-002"
#     DISH_HELM_RELEASE: "2.5.0"
#     K8S_DISH_LMC_CHART: "ska-dish-lmc"


k8s-test-mid-with-csp:
  retry: 1
  extends:
    - k8s-test
  variables:
    TELESCOPE: 'SKA-mid'
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-mid'
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-mid"
    MARK: 'real_csp_mid'
    CSP_SIMULATION_ENABLED: 'false'
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - make k8s-install-chart TELESCOPE=SKA-mid
    - make k8s-wait
    - make k8s-test
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-mid-with-csp
    auto_stop_in: 1 minute


stop-k8s-test-mid-with-csp:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-mid'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace


# deploy-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# redeploy-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# info-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# stop-integration:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

# #staging
# deploy-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG

# redeploy-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG


# info-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG

# stop-staging:
#   stage: staging
#   when: manual
#   rules:
#     - if: $CI_COMMIT_TAG